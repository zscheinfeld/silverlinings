import Head from "next/head";
import Book from "@/components/Book";
import Landing from "@/components/Landing";
import { useRouter } from "next/router";
import Script from "next/script";
import useActiveChapter from "@/hooks/useActiveChapter";
import TopNav from "@/components/TopNav";
import { useState } from "react";

import { Spectral } from "next/font/google";
import MobileChapterNav from "@/components/chapter/MobileChapterNav";
import { queryBook } from "@/contentful";
import Introduction from "@/data/introduction";

const spectral = Spectral({
  weight: ["200", "300", "400", "500", "600", "700", "800"],
  subsets: ["latin"],
});

export default function Home({ book }) {
  const router = useRouter();
  const { isOpen, activeChapter } = useActiveChapter(book.chapters);
  const [isTopNavOpen, setIsTopNavOpen] = useState(false);

  const chapter = book.chapters[activeChapter];

  const navigateToBook = () => {
    void router.push(
      {
        query: { ...router.query, chapter: book.chapters[1].slug },
      },
      undefined,
      {
        scroll: false,
      }
    );
  };

  return (
    <>
      <Head>
        <title>Silver Linings</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <Script
        src="https://cdn.jsdelivr.net/npm/jsvectormap"
        strategy="beforeInteractive"
      />
      <Script
        src="https://cdn.jsdelivr.net/npm/jsvectormap/dist/maps/world.js"
        strategy="beforeInteractive"
      />

      <div
        className={`main ${spectral.className} ${isOpen == null && "invisible"}`}
      >
        <TopNav
          handleOpen={setIsTopNavOpen}
          isOpen={isOpen}
          chapters={book.chapters}
          dark={chapter?.dark}
        />
        <MobileChapterNav
          isOpen={isOpen}
          chapters={book.chapters}
          activeChapter={activeChapter}
          handleOpen={setIsTopNavOpen}
        />
        <Landing isOpen={isOpen} onReachedBottom={navigateToBook} />
        <Book
          book={book}
          activeChapter={activeChapter}
          isOpen={isOpen}
          setIsTopNavOpen={setIsTopNavOpen}
          isTopNavOpen={isTopNavOpen}
        />
      </div>
    </>
  );
}

export const getStaticProps = async () => {
  const book = await queryBook();
  book.chapters = [Introduction, ...book.chapters];
  return { props: { book } };
};
